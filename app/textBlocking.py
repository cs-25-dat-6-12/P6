import json
import pandas as pd
import strsimpy


def load_data(filepath1, filepath2, matches_path):
    df1 = pd.read_csv(filepath1, sep="\t", header=0)

    df2 = pd.read_csv(filepath2, sep="\t", header=0)

    matches = pd.read_csv(matches_path, sep="\t", header=0)

    return df1, df2, matches


def create_parts_dictionary(df):
    name_parts_indexes = {}
    # NOTE name_parts_indexes will map a name part to a set of indexes of all the records with that name part
    # so if we do name_parts_indexes["Emil"] we get the set of indexes of all records that have "Emil" as a name part
    # Most sets will probably have just a single entry, but some names are much more common than others!
    for index, row in df.iterrows():
        name_parts = []
        try:
            name_parts = json.loads(row["name_parts"]).values()
        except json.JSONDecodeError:
            print("Error decoding name parts. Skipping.")
            continue
        for name_part in name_parts:
            name_parts_indexes.update(
                {name_part: (name_parts_indexes.get(name_part, set()).union({index}))}
            )
    return name_parts_indexes


# print(df.iloc[2475])  <- indexes dataframes by integer value


def create_blocks(df, name_parts_indexes, similarity_threshold=0.85):
    # given a dataset which *wasn't* used to create name_parts_indexes, blocks for each record
    # unfortunately, since transliteration doesn't produce the exact equivalent names, we can't just lookup our name parts the name_parts_indexes,
    # so we iterate over the keys and test for similarity instead.
    # this will take a while, but that's fine: Blocks only have to be made once.
    blocks = {}
    for index, row in df.iterrows():
        # a block is an index of a record and a set of all the indexes of records that it might match with
        print(f"Blocking record {index}")
        blocks.update({index: set()})
        name_parts = []
        try:
            name_parts = json.loads(row["name_parts"]).values()
        except json.JSONDecodeError:
            print("Error decoding name parts. Skipping.")
            continue
        for name_part in name_parts:
            for key in name_parts_indexes:
                if (
                    strsimpy.NormalizedLevenshtein().distance(name_part, key)
                    >= similarity_threshold
                ):
                    # if the name_part is close enough to the key, union the current block with the new possible matches
                    possible_matches = name_parts_indexes[key]
                    blocks.update({index: (blocks.get(index)).union(possible_matches)})
    return blocks


def calculate_recall(blocks, df1, df2, matches):
    # given blocks as a dictionary in the form generated by create_blocks(),
    # where record IDs from df2 map to sets of record IDs from df1,
    # and a dataset that shows the matches between df1 and df2, calculate recall.
    total_matches = len(matches)
    found_matches = 0
    current_block = 0
    for df2_index, set in blocks.items():
        print(f"Finding recall for block {current_block}")
        current_block += 1
        for df1_index in set:
            df1_name_parts = df1.iloc[df1_index]["name_parts"]
            df2_name_parts = df2.iloc[df2_index]["name_parts"]

            # NOTE hardcoding the columns here. Beware!
            is_match = (
                matches[matches["name_parts_LASKI"] == df1_name_parts][
                    "name_parts_roman"
                ]
                == df2_name_parts
            )
            sum = is_match.sum()
            if sum > 0:
                # NOTE did you know that there's a match that occurs twice? Look for "David Davidov" and "dvyd davydov" in transliterated_em.csv. That's why we add the sum and not just 1
                found_matches += sum
    recall = found_matches / total_matches
    return recall


if __name__ == "__main__":
    df1, df2, matches = load_data(
        r"datasets\testset15-Zylbercweig-Laski\LASKI.tsv",
        r"datasets\testset15-Zylbercweig-Laski\Zylbercweig_roman.csv",
        r"datasets\testset15-Zylbercweig-Laski\transliterated_em.csv",
    )
    # df1 is LASKI, df2 is Zylbercweig

    name_parts_indexes = create_parts_dictionary(df1)

    # Note that the size of a set is equivalent to the support of the name_part that maps to it, as defined in the Yad Vashem-paper
    print(
        f"Biggest set size: {max([len(item) for item in name_parts_indexes.values()])}"
    )

    blocks = {}
    try:
        with open(r"app\blocks.json") as file:
            print("Retrieving blocks...")
            blocks = json.load(file)
            blocks = {int(k): set(v) for k, v in blocks.items()}
    except OSError:  # NOTE we only do blocking if a blocks.json file doesn't exist!
        blocks = create_blocks(df2, name_parts_indexes)
        # when we're done blocking, write the blocks to blocks.json. We must store our sets as lists due to the format
        blocks = {k: list(v) for k, v in blocks.items()}
        with open(r"app\blocks.json", "w", encoding="utf-8") as file:
            json.dump(blocks, file, ensure_ascii=False, indent=4)

    print(f"Biggest block size: {max([len(item) for item in blocks.values()])}")
    print(f"Smallest block size: {min([len(item) for item in blocks.values()])}")

    recall = calculate_recall(blocks, df1, df2, matches)
    print(f"Recall: {recall}")
