import time
from openai import OpenAI
import json
import pandas as pd

# template
# {"custom_id": "request-1", "method": "POST", "url": "/v1/chat/completions", "body": {"model": "gpt-3.5-turbo-0125", "messages": [{"role": "system", "content": "You are a helpful assistant."},{"role": "user", "content": "Hello world!"}],"max_tokens": 1000}}


def create_name_list(block, blocks_df):
    # given a set of record indexes, fetch each name from their dataframe and write a string where each name is on a new line
    name_list = ""
    for index in block:
        name_list += blocks_df.iloc[index]["title"] + "\n"
    name_list = name_list[:-1]
    return name_list


def prepare_batch_file(
    blocks,
    df,
    blocks_df,
    filepath,
    model="GPT-4.1 nano",
    max_tokens_per_request=500,
):
    # given a blocks-dictionary as generated by textBlocking.py, the dataset the blocks were made for "df",
    # and the dataset used to create those blocks "blocks_df", write a file with gpt-4o-mini requests for batch processing
    print(f"Overwriting {filepath}")

    for i in range(10):
        print(f"You have {10-i} seconds to cancel! ", end="\r")
        time.sleep(1)

    with open(filepath, "w", encoding="utf-8") as file:
        for record in blocks:
            print(
                f"Writing request for block {record}     ",
                end="\r",
            )
            request = {
                "custom_id": record,
                "method": "POST",
                "url": "/v1/chat/completions",
                "body": {
                    "model": model,
                    "messages": [
                        {
                            "role": "developer",
                            "content": f'You will be given a list of jewish names with one name on each line of the input. For each name you must determine if it refers to the same person as the target name "{df.iloc[record]["title"]}". The names have been transliterated from the hebrew alphabet and may be different from the target name even if the names refer to the same person. For each name, replace it with "True" or "False" depending on whether or not the names refer to the same person. You must provide an answer for all {len(blocks[record])} names.',
                        },
                        {
                            "role": "user",
                            "content": create_name_list(blocks[record], blocks_df),
                        },
                    ],
                    "max_tokens": max_tokens_per_request,
                },
            }
            request_string = json.dumps(request)
            file.write(request_string + "\n")
        print("\n")
        print("Writing complete.")


def upload_batch_file(filepath):
    with open(open(filepath, "rb")) as file:
        batch_file = client.files.create(file, purpose="batch")
        print(batch_file)


def create_batch(file_object_id):
    pass


def check_batch_status(batch_name):
    pass


def retrieve_batch_results(output_file_id):
    pass


if __name__ == "__main__":
    df = pd.read_csv(
        r"datasets\testset15-Zylbercweig-Laski\LASKI.tsv", sep="\t", header=0
    )
    blocks_df = pd.read_csv(
        r"datasets\testset15-Zylbercweig-Laski\Zylbercweig_roman.csv",
        sep="\t",
        header=0,
    )
    blocks = {}
    with open(r"app\blocks.json") as file:
        print("Retrieving blocks...")
        blocks = json.load(file)
        blocks = {int(k): set(v) for k, v in blocks.items()}

    prepare_batch_file(blocks, df, blocks_df, r"app\batchfile.jsonl")

    # setup the client as a global variable
    with open("secrets.json", "r") as file:
        secrets = json.load(file)
        global client
        client = OpenAI(
            organization=secrets["organization"],
            project=secrets["project"],
            api_key=secrets["api_key"],
        )
